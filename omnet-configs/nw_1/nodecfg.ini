[General]

network = nw_1.Nw_1

# =============================
#         1
# =============================

*.MX_1.numApps = 3
*.MX_1.hasOutgoingStreams = true

# =========== Sending ===========

# f2: 1 to 6
*.MX_1.app[0].typename = "UdpBasicApp"
*.MX_1.app[0].display-name = "f2"
*.MX_1.app[0].destAddresses = "MX_6"
*.MX_1.app[0].destPort = 1002
*.MX_1.app[0].messageLength = 363B
*.MX_1.app[0].sendInterval = gamma_d(1.1610628473424198, 1.9320271466291413e-05) * 1s

# f4: 1 to 6
*.MX_1.app[1].typename = "UdpBasicApp"
*.MX_1.app[1].display-name = "f4"
*.MX_1.app[1].destAddresses = "MX_6"
*.MX_1.app[1].destPort = 1004
*.MX_1.app[1].messageLength = 363B
*.MX_1.app[1].sendInterval = gamma_d(1.1472764059195502, 1.95712508198608e-05) * 1s

# f11: 1 to 8
*.MX_1.app[2].typename = "UdpBasicApp"
*.MX_1.app[2].display-name = "f11"
*.MX_1.app[2].destAddresses = "MX_8"
*.MX_1.app[2].destPort = 1011
*.MX_1.app[2].messageLength = 363B
*.MX_1.app[2].sendInterval = gamma_d(1.0916080344368642, 5.876601424348146e-05) * 1s

# client stream identification
*.MX_1.bridging.streamIdentifier.identifier.mapping = [
        {stream: "f2", packetFilter: expr(has(udp) && udp.destPort == 1002)},
        {stream: "f4", packetFilter: expr(has(udp) && udp.destPort == 1004)},
        {stream: "f11", packetFilter: expr(has(udp) && udp.destPort == 1011)}
    ]

# client stream encoding
*.MX_1.bridging.streamCoder.encoder.mapping = [
        {stream: "f2", pcp: 5, vlan: 12},
        {stream: "f4", pcp: 5, vlan: 14},
        {stream: "f11", pcp: 5, vlan: 21}
    ]

# =========== Receiving ===========
# No flows

# =============================
#         2
# =============================

*.MX_2.numApps = 7
*.MX_2.hasOutgoingStreams = true

# =========== Sending ===========

# f3: 2 to 8
*.MX_2.app[0].typename = "UdpBasicApp"
*.MX_2.app[0].display-name = "f3"
*.MX_2.app[0].destAddresses = "MX_8"
*.MX_2.app[0].destPort = 1003
*.MX_2.app[0].messageLength = 363B
*.MX_2.app[0].sendInterval = gamma_d(1.058406647069307, 6.286873196084366e-05) * 1s

# f5: 2 to 8
*.MX_2.app[1].typename = "UdpBasicApp"
*.MX_2.app[1].display-name = "f5"
*.MX_2.app[1].destAddresses = "MX_8"
*.MX_2.app[1].destPort = 1005
*.MX_2.app[1].messageLength = 363B
*.MX_2.app[1].sendInterval = gamma_d(1.058406647069307, 6.286873196084366e-05) * 1s

# f8: 2 to 8
*.MX_2.app[2].typename = "UdpBasicApp"
*.MX_2.app[2].display-name = "f8"
*.MX_2.app[2].destAddresses = "MX_8"
*.MX_2.app[2].destPort = 1008
*.MX_2.app[2].messageLength = 363B
*.MX_2.app[2].sendInterval = gamma_d(1.058406647069307, 6.286873196084366e-05) * 1s

# f9: 2 to 8
*.MX_2.app[3].typename = "UdpBasicApp"
*.MX_2.app[3].display-name = "f9"
*.MX_2.app[3].destAddresses = "MX_8"
*.MX_2.app[3].destPort = 1009
*.MX_2.app[3].messageLength = 363B
*.MX_2.app[3].sendInterval = gamma_d(1.058406647069307, 6.286873196084366e-05) * 1s

# f12: 2 to 4
*.MX_2.app[4].typename = "UdpBasicApp"
*.MX_2.app[4].display-name = "f12"
*.MX_2.app[4].destAddresses = "MX_4"
*.MX_2.app[4].destPort = 1012
*.MX_2.app[4].messageLength = 363B
*.MX_2.app[4].sendInterval = gamma_d(1.138789770263302, 9.912018701577217e-06) * 1s

# f13: 2 to 4
*.MX_2.app[5].typename = "UdpBasicApp"
*.MX_2.app[5].display-name = "f13"
*.MX_2.app[5].destAddresses = "MX_4"
*.MX_2.app[5].destPort = 1013
*.MX_2.app[5].messageLength = 363B
*.MX_2.app[5].sendInterval = gamma_d(1.138789770263302, 9.912018701577217e-06) * 1s

# f18: 2 to 8
*.MX_2.app[6].typename = "UdpBasicApp"
*.MX_2.app[6].display-name = "f18"
*.MX_2.app[6].destAddresses = "MX_8"
*.MX_2.app[6].destPort = 1018
*.MX_2.app[6].messageLength = 363B
*.MX_2.app[6].sendInterval = gamma_d(1.058406647069307, 6.286873196084366e-05) * 1s

# client stream identification
*.MX_2.bridging.streamIdentifier.identifier.mapping = [
        {stream: "f3", packetFilter: expr(has(udp) && udp.destPort == 1003)},
        {stream: "f5", packetFilter: expr(has(udp) && udp.destPort == 1005)},
        {stream: "f8", packetFilter: expr(has(udp) && udp.destPort == 1008)},
        {stream: "f9", packetFilter: expr(has(udp) && udp.destPort == 1009)},
        {stream: "f12", packetFilter: expr(has(udp) && udp.destPort == 1012)},
        {stream: "f13", packetFilter: expr(has(udp) && udp.destPort == 1013)},
        {stream: "f18", packetFilter: expr(has(udp) && udp.destPort == 1018)}
    ]

# client stream encoding
*.MX_2.bridging.streamCoder.encoder.mapping = [
        {stream: "f3", pcp: 5, vlan: 13},
        {stream: "f5", pcp: 5, vlan: 15},
        {stream: "f8", pcp: 5, vlan: 18},
        {stream: "f9", pcp: 5, vlan: 19},
        {stream: "f12", pcp: 5, vlan: 22},
        {stream: "f13", pcp: 5, vlan: 23},
        {stream: "f18", pcp: 5, vlan: 28}
    ]

# =========== Receiving ===========
# No flows

# =============================
#         3
# =============================

*.MX_3.numApps = 3
*.MX_3.hasOutgoingStreams = true

# =========== Sending ===========

# f0: 3 to 6
*.MX_3.app[0].typename = "UdpBasicApp"
*.MX_3.app[0].display-name = "f0"
*.MX_3.app[0].destAddresses = "MX_6"
*.MX_3.app[0].destPort = 1000
*.MX_3.app[0].messageLength = 363B
*.MX_3.app[0].sendInterval = gamma_d(1.12656797020133, 2.094433378557658e-05) * 1s

# f6: 3 to 8
*.MX_3.app[1].typename = "UdpBasicApp"
*.MX_3.app[1].display-name = "f6"
*.MX_3.app[1].destAddresses = "MX_8"
*.MX_3.app[1].destPort = 1006
*.MX_3.app[1].messageLength = 363B
*.MX_3.app[1].sendInterval = gamma_d(0.9954140347503732, 0.0030665963193552033) * 1s

# f10: 3 to 5
*.MX_3.app[2].typename = "UdpBasicApp"
*.MX_3.app[2].display-name = "f10"
*.MX_3.app[2].destAddresses = "MX_5"
*.MX_3.app[2].destPort = 1010
*.MX_3.app[2].messageLength = 363B
*.MX_3.app[2].sendInterval = gamma_d(1.2572049290745986, 6.295419797483408e-06) * 1s

# client stream identification
*.MX_3.bridging.streamIdentifier.identifier.mapping = [
        {stream: "f0", packetFilter: expr(has(udp) && udp.destPort == 1000)},
        {stream: "f6", packetFilter: expr(has(udp) && udp.destPort == 1006)},
        {stream: "f10", packetFilter: expr(has(udp) && udp.destPort == 1010)}
    ]

# client stream encoding
*.MX_3.bridging.streamCoder.encoder.mapping = [
        {stream: "f0", pcp: 5, vlan: 10},
        {stream: "f6", pcp: 5, vlan: 16},
        {stream: "f10", pcp: 5, vlan: 20}
    ]

# =========== Receiving ===========
# No flows

# =============================
#         4
# =============================

*.MX_4.numApps = 3
*.MX_4.hasOutgoingStreams = true

# =========== Sending ===========

# f1: 4 to 7
*.MX_4.app[0].typename = "UdpBasicApp"
*.MX_4.app[0].display-name = "f1"
*.MX_4.app[0].destAddresses = "MX_7"
*.MX_4.app[0].destPort = 1001
*.MX_4.app[0].messageLength = 363B
*.MX_4.app[0].sendInterval = gamma_d(0.9954140347503732, 0.0030665963193552033) * 1s

# client stream identification
*.MX_4.bridging.streamIdentifier.identifier.mapping = [
        {stream: "f1", packetFilter: expr(has(udp) && udp.destPort == 1001)}
    ]

# client stream encoding
*.MX_4.bridging.streamCoder.encoder.mapping = [
        {stream: "f1", pcp: 5, vlan: 11}
    ]

# =========== Receiving ===========

# f12: 4 from 2
*.MX_4.app[1].typename = "UdpSinkApp"
*.MX_4.app[1].io.localPort = 1012

# f13: 4 from 2
*.MX_4.app[2].typename = "UdpSinkApp"
*.MX_4.app[2].io.localPort = 1013

# =============================
#         5
# =============================

*.MX_5.numApps = 2
*.MX_5.hasOutgoingStreams = true

# =========== Sending ===========

# f17: 5 to 7
*.MX_5.app[0].typename = "UdpBasicApp"
*.MX_5.app[0].display-name = "f17"
*.MX_5.app[0].destAddresses = "MX_7"
*.MX_5.app[0].destPort = 1017
*.MX_5.app[0].messageLength = 363B
*.MX_5.app[0].sendInterval = gamma_d(1.050274468840232, 0.0005045095559497891) * 1s

# client stream identification
*.MX_5.bridging.streamIdentifier.identifier.mapping = [
        {stream: "f17", packetFilter: expr(has(udp) && udp.destPort == 1017)}
    ]

# client stream encoding
*.MX_5.bridging.streamCoder.encoder.mapping = [
        {stream: "f17", pcp: 5, vlan: 27}
    ]

# =========== Receiving ===========

# f10: 5 from 3
*.MX_5.app[1].typename = "UdpSinkApp"
*.MX_5.app[1].io.localPort = 1010

# =============================
#         6
# =============================

*.MX_6.numApps = 6
*.MX_6.hasOutgoingStreams = true

# =========== Sending ===========

# f7: 6 to 7
*.MX_6.app[0].typename = "UdpBasicApp"
*.MX_6.app[0].display-name = "f7"
*.MX_6.app[0].destAddresses = "MX_7"
*.MX_6.app[0].destPort = 1007
*.MX_6.app[0].messageLength = 363B
*.MX_6.app[0].sendInterval = gamma_d(1.0421801118660772, 0.0017370930854345825) * 1s

# f14: 6 to 7
*.MX_6.app[1].typename = "UdpBasicApp"
*.MX_6.app[1].display-name = "f14"
*.MX_6.app[1].destAddresses = "MX_7"
*.MX_6.app[1].destPort = 1014
*.MX_6.app[1].messageLength = 363B
*.MX_6.app[1].sendInterval = gamma_d(1.0421801118660772, 0.0017370930854345825) * 1s

# f16: 6 to 7
*.MX_6.app[2].typename = "UdpBasicApp"
*.MX_6.app[2].display-name = "f16"
*.MX_6.app[2].destAddresses = "MX_7"
*.MX_6.app[2].destPort = 1016
*.MX_6.app[2].messageLength = 363B
*.MX_6.app[2].sendInterval = gamma_d(1.0421801118660772, 0.0017370930854345825) * 1s

# client stream identification
*.MX_6.bridging.streamIdentifier.identifier.mapping = [
        {stream: "f7", packetFilter: expr(has(udp) && udp.destPort == 1007)},
        {stream: "f14", packetFilter: expr(has(udp) && udp.destPort == 1014)},
        {stream: "f16", packetFilter: expr(has(udp) && udp.destPort == 1016)}
    ]

# client stream encoding
*.MX_6.bridging.streamCoder.encoder.mapping = [
        {stream: "f7", pcp: 5, vlan: 17},
        {stream: "f14", pcp: 5, vlan: 24},
        {stream: "f16", pcp: 5, vlan: 26}
    ]

# =========== Receiving ===========

# f0: 6 from 3
*.MX_6.app[3].typename = "UdpSinkApp"
*.MX_6.app[3].io.localPort = 1000

# f2: 6 from 1
*.MX_6.app[4].typename = "UdpSinkApp"
*.MX_6.app[4].io.localPort = 1002

# f4: 6 from 1
*.MX_6.app[5].typename = "UdpSinkApp"
*.MX_6.app[5].io.localPort = 1004

# =============================
#         7
# =============================

*.MX_7.numApps = 6
*.MX_7.hasOutgoingStreams = true

# =========== Sending ===========

# f15: 7 to 8
*.MX_7.app[0].typename = "UdpBasicApp"
*.MX_7.app[0].display-name = "f15"
*.MX_7.app[0].destAddresses = "MX_8"
*.MX_7.app[0].destPort = 1015
*.MX_7.app[0].messageLength = 363B
*.MX_7.app[0].sendInterval = gamma_d(1.1317938491759036, 3.5950165332346446e-05) * 1s

# client stream identification
*.MX_7.bridging.streamIdentifier.identifier.mapping = [
        {stream: "f15", packetFilter: expr(has(udp) && udp.destPort == 1015)}
    ]

# client stream encoding
*.MX_7.bridging.streamCoder.encoder.mapping = [
        {stream: "f15", pcp: 5, vlan: 25}
    ]

# =========== Receiving ===========

# f1: 7 from 4
*.MX_7.app[1].typename = "UdpSinkApp"
*.MX_7.app[1].io.localPort = 1001

# f7: 7 from 6
*.MX_7.app[2].typename = "UdpSinkApp"
*.MX_7.app[2].io.localPort = 1007

# f14: 7 from 6
*.MX_7.app[3].typename = "UdpSinkApp"
*.MX_7.app[3].io.localPort = 1014

# f16: 7 from 6
*.MX_7.app[4].typename = "UdpSinkApp"
*.MX_7.app[4].io.localPort = 1016

# f17: 7 from 5
*.MX_7.app[5].typename = "UdpSinkApp"
*.MX_7.app[5].io.localPort = 1017

# =============================
#         8
# =============================

*.MX_8.numApps = 8
*.MX_8.hasOutgoingStreams = false

# =========== Sending ===========

# No flows

# =========== Receiving ===========

# f3: 8 from 2
*.MX_8.app[0].typename = "UdpSinkApp"
*.MX_8.app[0].io.localPort = 1003

# f5: 8 from 2
*.MX_8.app[1].typename = "UdpSinkApp"
*.MX_8.app[1].io.localPort = 1005

# f6: 8 from 3
*.MX_8.app[2].typename = "UdpSinkApp"
*.MX_8.app[2].io.localPort = 1006

# f8: 8 from 2
*.MX_8.app[3].typename = "UdpSinkApp"
*.MX_8.app[3].io.localPort = 1008

# f9: 8 from 2
*.MX_8.app[4].typename = "UdpSinkApp"
*.MX_8.app[4].io.localPort = 1009

# f11: 8 from 1
*.MX_8.app[5].typename = "UdpSinkApp"
*.MX_8.app[5].io.localPort = 1011

# f15: 8 from 7
*.MX_8.app[6].typename = "UdpSinkApp"
*.MX_8.app[6].io.localPort = 1015

# f18: 8 from 2
*.MX_8.app[7].typename = "UdpSinkApp"
*.MX_8.app[7].io.localPort = 1018

