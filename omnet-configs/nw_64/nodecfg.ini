[General]

network = nw_64.Nw_64

# =============================
#         3
# =============================

*.MX_3.numApps = 5
*.MX_3.hasOutgoingStreams = true

# =========== Sending ===========

# f4: 3 to 12
*.MX_3.app[0].typename = "UdpBasicApp"
*.MX_3.app[0].display-name = "f4"
*.MX_3.app[0].destAddresses = "MX_12"
*.MX_3.app[0].destPort = 1004
*.MX_3.app[0].messageLength = 363B
*.MX_3.app[0].sendInterval = gamma_d(0.9954140347503732, 0.0030665963193552033) * 1s

# f5: 3 to 8
*.MX_3.app[1].typename = "UdpBasicApp"
*.MX_3.app[1].display-name = "f5"
*.MX_3.app[1].destAddresses = "MX_8"
*.MX_3.app[1].destPort = 1005
*.MX_3.app[1].messageLength = 363B
*.MX_3.app[1].sendInterval = gamma_d(0.5325625213779135, 1.7823047659312046e-05) * 1s

# f9: 3 to 12
*.MX_3.app[2].typename = "UdpBasicApp"
*.MX_3.app[2].display-name = "f9"
*.MX_3.app[2].destAddresses = "MX_12"
*.MX_3.app[2].destPort = 1009
*.MX_3.app[2].messageLength = 363B
*.MX_3.app[2].sendInterval = gamma_d(0.9954140347503732, 0.0030665963193552033) * 1s

# f14: 3 to 12
*.MX_3.app[3].typename = "UdpBasicApp"
*.MX_3.app[3].display-name = "f14"
*.MX_3.app[3].destAddresses = "MX_12"
*.MX_3.app[3].destPort = 1014
*.MX_3.app[3].messageLength = 363B
*.MX_3.app[3].sendInterval = gamma_d(0.9954140347503732, 0.0030665963193552033) * 1s

# f15: 3 to 6
*.MX_3.app[4].typename = "UdpBasicApp"
*.MX_3.app[4].display-name = "f15"
*.MX_3.app[4].destAddresses = "MX_6"
*.MX_3.app[4].destPort = 1015
*.MX_3.app[4].messageLength = 363B
*.MX_3.app[4].sendInterval = gamma_d(0.5532410827537301, 2.628098446274113e-05) * 1s

# client stream identification
*.MX_3.bridging.streamIdentifier.identifier.mapping = [
        {stream: "f4", packetFilter: expr(has(udp) && udp.destPort == 1004)},
        {stream: "f5", packetFilter: expr(has(udp) && udp.destPort == 1005)},
        {stream: "f9", packetFilter: expr(has(udp) && udp.destPort == 1009)},
        {stream: "f14", packetFilter: expr(has(udp) && udp.destPort == 1014)},
        {stream: "f15", packetFilter: expr(has(udp) && udp.destPort == 1015)}
    ]

# client stream encoding
*.MX_3.bridging.streamCoder.encoder.mapping = [
        {stream: "f4", pcp: 5, vlan: 14},
        {stream: "f5", pcp: 5, vlan: 15},
        {stream: "f9", pcp: 5, vlan: 19},
        {stream: "f14", pcp: 5, vlan: 24},
        {stream: "f15", pcp: 5, vlan: 25}
    ]

# =========== Receiving ===========
# No flows

# =============================
#         4
# =============================

*.MX_4.numApps = 5
*.MX_4.hasOutgoingStreams = true

# =========== Sending ===========

# f1: 4 to 8
*.MX_4.app[0].typename = "UdpBasicApp"
*.MX_4.app[0].display-name = "f1"
*.MX_4.app[0].destAddresses = "MX_8"
*.MX_4.app[0].destPort = 1001
*.MX_4.app[0].messageLength = 363B
*.MX_4.app[0].sendInterval = gamma_d(0.7773627727195382, 1.2920546304097949e-05) * 1s

# f3: 4 to 12
*.MX_4.app[1].typename = "UdpBasicApp"
*.MX_4.app[1].display-name = "f3"
*.MX_4.app[1].destAddresses = "MX_12"
*.MX_4.app[1].destPort = 1003
*.MX_4.app[1].messageLength = 363B
*.MX_4.app[1].sendInterval = gamma_d(0.9954140347503732, 0.0030665963193552033) * 1s

# f7: 4 to 12
*.MX_4.app[2].typename = "UdpBasicApp"
*.MX_4.app[2].display-name = "f7"
*.MX_4.app[2].destAddresses = "MX_12"
*.MX_4.app[2].destPort = 1007
*.MX_4.app[2].messageLength = 363B
*.MX_4.app[2].sendInterval = gamma_d(0.9954140347503732, 0.0030665963193552033) * 1s

# f8: 4 to 12
*.MX_4.app[3].typename = "UdpBasicApp"
*.MX_4.app[3].display-name = "f8"
*.MX_4.app[3].destAddresses = "MX_12"
*.MX_4.app[3].destPort = 1008
*.MX_4.app[3].messageLength = 363B
*.MX_4.app[3].sendInterval = gamma_d(0.9954140347503732, 0.0030665963193552033) * 1s

# f17: 4 to 6
*.MX_4.app[4].typename = "UdpBasicApp"
*.MX_4.app[4].display-name = "f17"
*.MX_4.app[4].destAddresses = "MX_6"
*.MX_4.app[4].destPort = 1017
*.MX_4.app[4].messageLength = 363B
*.MX_4.app[4].sendInterval = gamma_d(0.7928823735064847, 1.841749014472404e-05) * 1s

# client stream identification
*.MX_4.bridging.streamIdentifier.identifier.mapping = [
        {stream: "f1", packetFilter: expr(has(udp) && udp.destPort == 1001)},
        {stream: "f3", packetFilter: expr(has(udp) && udp.destPort == 1003)},
        {stream: "f7", packetFilter: expr(has(udp) && udp.destPort == 1007)},
        {stream: "f8", packetFilter: expr(has(udp) && udp.destPort == 1008)},
        {stream: "f17", packetFilter: expr(has(udp) && udp.destPort == 1017)}
    ]

# client stream encoding
*.MX_4.bridging.streamCoder.encoder.mapping = [
        {stream: "f1", pcp: 5, vlan: 11},
        {stream: "f3", pcp: 5, vlan: 13},
        {stream: "f7", pcp: 5, vlan: 17},
        {stream: "f8", pcp: 5, vlan: 18},
        {stream: "f17", pcp: 5, vlan: 27}
    ]

# =========== Receiving ===========
# No flows

# =============================
#         6
# =============================

*.MX_6.numApps = 5
*.MX_6.hasOutgoingStreams = true

# =========== Sending ===========

# f6: 6 to 12
*.MX_6.app[0].typename = "UdpBasicApp"
*.MX_6.app[0].display-name = "f6"
*.MX_6.app[0].destAddresses = "MX_12"
*.MX_6.app[0].destPort = 1006
*.MX_6.app[0].messageLength = 363B
*.MX_6.app[0].sendInterval = gamma_d(0.9954140347503732, 0.0030665963193552033) * 1s

# f11: 6 to 8
*.MX_6.app[1].typename = "UdpBasicApp"
*.MX_6.app[1].display-name = "f11"
*.MX_6.app[1].destAddresses = "MX_8"
*.MX_6.app[1].destPort = 1011
*.MX_6.app[1].messageLength = 363B
*.MX_6.app[1].sendInterval = gamma_d(0.9954140347503732, 0.0030665963193552033) * 1s

# f16: 6 to 12
*.MX_6.app[2].typename = "UdpBasicApp"
*.MX_6.app[2].display-name = "f16"
*.MX_6.app[2].destAddresses = "MX_12"
*.MX_6.app[2].destPort = 1016
*.MX_6.app[2].messageLength = 363B
*.MX_6.app[2].sendInterval = gamma_d(0.9954140347503732, 0.0030665963193552033) * 1s

# client stream identification
*.MX_6.bridging.streamIdentifier.identifier.mapping = [
        {stream: "f6", packetFilter: expr(has(udp) && udp.destPort == 1006)},
        {stream: "f11", packetFilter: expr(has(udp) && udp.destPort == 1011)},
        {stream: "f16", packetFilter: expr(has(udp) && udp.destPort == 1016)}
    ]

# client stream encoding
*.MX_6.bridging.streamCoder.encoder.mapping = [
        {stream: "f6", pcp: 5, vlan: 16},
        {stream: "f11", pcp: 5, vlan: 21},
        {stream: "f16", pcp: 5, vlan: 26}
    ]

# =========== Receiving ===========

# f15: 6 from 3
*.MX_6.app[3].typename = "UdpSinkApp"
*.MX_6.app[3].io.localPort = 1015

# f17: 6 from 4
*.MX_6.app[4].typename = "UdpSinkApp"
*.MX_6.app[4].io.localPort = 1017

# =============================
#         7
# =============================

*.MX_7.numApps = 3
*.MX_7.hasOutgoingStreams = true

# =========== Sending ===========

# f2: 7 to 12
*.MX_7.app[0].typename = "UdpBasicApp"
*.MX_7.app[0].display-name = "f2"
*.MX_7.app[0].destAddresses = "MX_12"
*.MX_7.app[0].destPort = 1002
*.MX_7.app[0].messageLength = 363B
*.MX_7.app[0].sendInterval = gamma_d(1.0362478309182557, 4.236282546493278e-06) * 1s

# f18: 7 to 12
*.MX_7.app[1].typename = "UdpBasicApp"
*.MX_7.app[1].display-name = "f18"
*.MX_7.app[1].destAddresses = "MX_12"
*.MX_7.app[1].destPort = 1018
*.MX_7.app[1].messageLength = 363B
*.MX_7.app[1].sendInterval = gamma_d(0.9860364713839773, 0.00012681643552633768) * 1s

# f19: 7 to 12
*.MX_7.app[2].typename = "UdpBasicApp"
*.MX_7.app[2].display-name = "f19"
*.MX_7.app[2].destAddresses = "MX_12"
*.MX_7.app[2].destPort = 1019
*.MX_7.app[2].messageLength = 363B
*.MX_7.app[2].sendInterval = gamma_d(0.9860364713839773, 0.00012681643552633768) * 1s

# client stream identification
*.MX_7.bridging.streamIdentifier.identifier.mapping = [
        {stream: "f2", packetFilter: expr(has(udp) && udp.destPort == 1002)},
        {stream: "f18", packetFilter: expr(has(udp) && udp.destPort == 1018)},
        {stream: "f19", packetFilter: expr(has(udp) && udp.destPort == 1019)}
    ]

# client stream encoding
*.MX_7.bridging.streamCoder.encoder.mapping = [
        {stream: "f2", pcp: 5, vlan: 12},
        {stream: "f18", pcp: 5, vlan: 28},
        {stream: "f19", pcp: 5, vlan: 29}
    ]

# =========== Receiving ===========
# No flows

# =============================
#         8
# =============================

*.MX_8.numApps = 7
*.MX_8.hasOutgoingStreams = true

# =========== Sending ===========

# f0: 8 to 12
*.MX_8.app[0].typename = "UdpBasicApp"
*.MX_8.app[0].display-name = "f0"
*.MX_8.app[0].destAddresses = "MX_12"
*.MX_8.app[0].destPort = 1000
*.MX_8.app[0].messageLength = 363B
*.MX_8.app[0].sendInterval = gamma_d(0.9954140347503732, 0.0030665963193552033) * 1s

# f10: 8 to 12
*.MX_8.app[1].typename = "UdpBasicApp"
*.MX_8.app[1].display-name = "f10"
*.MX_8.app[1].destAddresses = "MX_12"
*.MX_8.app[1].destPort = 1010
*.MX_8.app[1].messageLength = 363B
*.MX_8.app[1].sendInterval = gamma_d(0.9954140347503732, 0.0030665963193552033) * 1s

# f12: 8 to 12
*.MX_8.app[2].typename = "UdpBasicApp"
*.MX_8.app[2].display-name = "f12"
*.MX_8.app[2].destAddresses = "MX_12"
*.MX_8.app[2].destPort = 1012
*.MX_8.app[2].messageLength = 363B
*.MX_8.app[2].sendInterval = gamma_d(0.9954140347503732, 0.0030665963193552033) * 1s

# f13: 8 to 12
*.MX_8.app[3].typename = "UdpBasicApp"
*.MX_8.app[3].display-name = "f13"
*.MX_8.app[3].destAddresses = "MX_12"
*.MX_8.app[3].destPort = 1013
*.MX_8.app[3].messageLength = 363B
*.MX_8.app[3].sendInterval = gamma_d(0.9954140347503732, 0.0030665963193552033) * 1s

# client stream identification
*.MX_8.bridging.streamIdentifier.identifier.mapping = [
        {stream: "f0", packetFilter: expr(has(udp) && udp.destPort == 1000)},
        {stream: "f10", packetFilter: expr(has(udp) && udp.destPort == 1010)},
        {stream: "f12", packetFilter: expr(has(udp) && udp.destPort == 1012)},
        {stream: "f13", packetFilter: expr(has(udp) && udp.destPort == 1013)}
    ]

# client stream encoding
*.MX_8.bridging.streamCoder.encoder.mapping = [
        {stream: "f0", pcp: 5, vlan: 10},
        {stream: "f10", pcp: 5, vlan: 20},
        {stream: "f12", pcp: 5, vlan: 22},
        {stream: "f13", pcp: 5, vlan: 23}
    ]

# =========== Receiving ===========

# f1: 8 from 4
*.MX_8.app[4].typename = "UdpSinkApp"
*.MX_8.app[4].io.localPort = 1001

# f5: 8 from 3
*.MX_8.app[5].typename = "UdpSinkApp"
*.MX_8.app[5].io.localPort = 1005

# f11: 8 from 6
*.MX_8.app[6].typename = "UdpSinkApp"
*.MX_8.app[6].io.localPort = 1011

# =============================
#         12
# =============================

*.MX_12.numApps = 15
*.MX_12.hasOutgoingStreams = false

# =========== Sending ===========

# No flows

# =========== Receiving ===========

# f0: 12 from 8
*.MX_12.app[0].typename = "UdpSinkApp"
*.MX_12.app[0].io.localPort = 1000

# f2: 12 from 7
*.MX_12.app[1].typename = "UdpSinkApp"
*.MX_12.app[1].io.localPort = 1002

# f3: 12 from 4
*.MX_12.app[2].typename = "UdpSinkApp"
*.MX_12.app[2].io.localPort = 1003

# f4: 12 from 3
*.MX_12.app[3].typename = "UdpSinkApp"
*.MX_12.app[3].io.localPort = 1004

# f6: 12 from 6
*.MX_12.app[4].typename = "UdpSinkApp"
*.MX_12.app[4].io.localPort = 1006

# f7: 12 from 4
*.MX_12.app[5].typename = "UdpSinkApp"
*.MX_12.app[5].io.localPort = 1007

# f8: 12 from 4
*.MX_12.app[6].typename = "UdpSinkApp"
*.MX_12.app[6].io.localPort = 1008

# f9: 12 from 3
*.MX_12.app[7].typename = "UdpSinkApp"
*.MX_12.app[7].io.localPort = 1009

# f10: 12 from 8
*.MX_12.app[8].typename = "UdpSinkApp"
*.MX_12.app[8].io.localPort = 1010

# f12: 12 from 8
*.MX_12.app[9].typename = "UdpSinkApp"
*.MX_12.app[9].io.localPort = 1012

# f13: 12 from 8
*.MX_12.app[10].typename = "UdpSinkApp"
*.MX_12.app[10].io.localPort = 1013

# f14: 12 from 3
*.MX_12.app[11].typename = "UdpSinkApp"
*.MX_12.app[11].io.localPort = 1014

# f16: 12 from 6
*.MX_12.app[12].typename = "UdpSinkApp"
*.MX_12.app[12].io.localPort = 1016

# f18: 12 from 7
*.MX_12.app[13].typename = "UdpSinkApp"
*.MX_12.app[13].io.localPort = 1018

# f19: 12 from 7
*.MX_12.app[14].typename = "UdpSinkApp"
*.MX_12.app[14].io.localPort = 1019

