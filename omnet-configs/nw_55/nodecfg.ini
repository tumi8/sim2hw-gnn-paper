[General]

network = nw_55.Nw_55

# =============================
#         1
# =============================

*.MX_1.numApps = 1
*.MX_1.hasOutgoingStreams = true

# =========== Sending ===========

# f3: 1 to 9
*.MX_1.app[0].typename = "UdpBasicApp"
*.MX_1.app[0].display-name = "f3"
*.MX_1.app[0].destAddresses = "MX_9"
*.MX_1.app[0].destPort = 1003
*.MX_1.app[0].messageLength = 363B
*.MX_1.app[0].sendInterval = gamma_d(1.207689890656601, 1.4654443940367717e-05) * 1s

# client stream identification
*.MX_1.bridging.streamIdentifier.identifier.mapping = [
        {stream: "f3", packetFilter: expr(has(udp) && udp.destPort == 1003)}
    ]

# client stream encoding
*.MX_1.bridging.streamCoder.encoder.mapping = [
        {stream: "f3", pcp: 5, vlan: 13}
    ]

# =========== Receiving ===========
# No flows

# =============================
#         2
# =============================

*.MX_2.numApps = 4
*.MX_2.hasOutgoingStreams = true

# =========== Sending ===========

# f5: 2 to 12
*.MX_2.app[0].typename = "UdpBasicApp"
*.MX_2.app[0].display-name = "f5"
*.MX_2.app[0].destAddresses = "MX_12"
*.MX_2.app[0].destPort = 1005
*.MX_2.app[0].messageLength = 363B
*.MX_2.app[0].sendInterval = gamma_d(0.9954140347503732, 0.0030665963193552033) * 1s

# f8: 2 to 13
*.MX_2.app[1].typename = "UdpBasicApp"
*.MX_2.app[1].display-name = "f8"
*.MX_2.app[1].destAddresses = "MX_13"
*.MX_2.app[1].destPort = 1008
*.MX_2.app[1].messageLength = 363B
*.MX_2.app[1].sendInterval = gamma_d(0.9954140347503732, 0.0030665963193552033) * 1s

# f10: 2 to 5
*.MX_2.app[2].typename = "UdpBasicApp"
*.MX_2.app[2].display-name = "f10"
*.MX_2.app[2].destAddresses = "MX_5"
*.MX_2.app[2].destPort = 1010
*.MX_2.app[2].messageLength = 363B
*.MX_2.app[2].sendInterval = gamma_d(1.1071069067598514, 2.227693825166187e-05) * 1s

# f19: 2 to 3
*.MX_2.app[3].typename = "UdpBasicApp"
*.MX_2.app[3].display-name = "f19"
*.MX_2.app[3].destAddresses = "MX_3"
*.MX_2.app[3].destPort = 1019
*.MX_2.app[3].messageLength = 363B
*.MX_2.app[3].sendInterval = gamma_d(1.2413389580703438, 6.856149438240892e-06) * 1s

# client stream identification
*.MX_2.bridging.streamIdentifier.identifier.mapping = [
        {stream: "f5", packetFilter: expr(has(udp) && udp.destPort == 1005)},
        {stream: "f8", packetFilter: expr(has(udp) && udp.destPort == 1008)},
        {stream: "f10", packetFilter: expr(has(udp) && udp.destPort == 1010)},
        {stream: "f19", packetFilter: expr(has(udp) && udp.destPort == 1019)}
    ]

# client stream encoding
*.MX_2.bridging.streamCoder.encoder.mapping = [
        {stream: "f5", pcp: 5, vlan: 15},
        {stream: "f8", pcp: 5, vlan: 18},
        {stream: "f10", pcp: 5, vlan: 20},
        {stream: "f19", pcp: 5, vlan: 29}
    ]

# =========== Receiving ===========
# No flows

# =============================
#         3
# =============================

*.MX_3.numApps = 2
*.MX_3.hasOutgoingStreams = true

# =========== Sending ===========

# f22: 3 to 9
*.MX_3.app[0].typename = "UdpBasicApp"
*.MX_3.app[0].display-name = "f22"
*.MX_3.app[0].destAddresses = "MX_9"
*.MX_3.app[0].destPort = 1022
*.MX_3.app[0].messageLength = 363B
*.MX_3.app[0].sendInterval = gamma_d(0.9954140347503732, 0.0030665963193552033) * 1s

# client stream identification
*.MX_3.bridging.streamIdentifier.identifier.mapping = [
        {stream: "f22", packetFilter: expr(has(udp) && udp.destPort == 1022)}
    ]

# client stream encoding
*.MX_3.bridging.streamCoder.encoder.mapping = [
        {stream: "f22", pcp: 5, vlan: 32}
    ]

# =========== Receiving ===========

# f19: 3 from 2
*.MX_3.app[1].typename = "UdpSinkApp"
*.MX_3.app[1].io.localPort = 1019

# =============================
#         4
# =============================

*.MX_4.numApps = 2
*.MX_4.hasOutgoingStreams = true

# =========== Sending ===========

# f23: 4 to 8
*.MX_4.app[0].typename = "UdpBasicApp"
*.MX_4.app[0].display-name = "f23"
*.MX_4.app[0].destAddresses = "MX_8"
*.MX_4.app[0].destPort = 1023
*.MX_4.app[0].messageLength = 363B
*.MX_4.app[0].sendInterval = gamma_d(0.9954140347503732, 0.0030665963193552033) * 1s

# f24: 4 to 10
*.MX_4.app[1].typename = "UdpBasicApp"
*.MX_4.app[1].display-name = "f24"
*.MX_4.app[1].destAddresses = "MX_10"
*.MX_4.app[1].destPort = 1024
*.MX_4.app[1].messageLength = 363B
*.MX_4.app[1].sendInterval = gamma_d(0.9954140347503732, 0.0030665963193552033) * 1s

# client stream identification
*.MX_4.bridging.streamIdentifier.identifier.mapping = [
        {stream: "f23", packetFilter: expr(has(udp) && udp.destPort == 1023)},
        {stream: "f24", packetFilter: expr(has(udp) && udp.destPort == 1024)}
    ]

# client stream encoding
*.MX_4.bridging.streamCoder.encoder.mapping = [
        {stream: "f23", pcp: 5, vlan: 33},
        {stream: "f24", pcp: 5, vlan: 34}
    ]

# =========== Receiving ===========
# No flows

# =============================
#         5
# =============================

*.MX_5.numApps = 6
*.MX_5.hasOutgoingStreams = true

# =========== Sending ===========

# f12: 5 to 13
*.MX_5.app[0].typename = "UdpBasicApp"
*.MX_5.app[0].display-name = "f12"
*.MX_5.app[0].destAddresses = "MX_13"
*.MX_5.app[0].destPort = 1012
*.MX_5.app[0].messageLength = 363B
*.MX_5.app[0].sendInterval = gamma_d(0.9993739298036287, 0.0009785263187645746) * 1s

# f13: 5 to 7
*.MX_5.app[1].typename = "UdpBasicApp"
*.MX_5.app[1].display-name = "f13"
*.MX_5.app[1].destAddresses = "MX_7"
*.MX_5.app[1].destPort = 1013
*.MX_5.app[1].messageLength = 363B
*.MX_5.app[1].sendInterval = gamma_d(1.0656360180092599, 7.530167753707938e-05) * 1s

# f14: 5 to 11
*.MX_5.app[2].typename = "UdpBasicApp"
*.MX_5.app[2].display-name = "f14"
*.MX_5.app[2].destAddresses = "MX_11"
*.MX_5.app[2].destPort = 1014
*.MX_5.app[2].messageLength = 363B
*.MX_5.app[2].sendInterval = gamma_d(1.2076335684160036, 1.4603279389662444e-05) * 1s

# f16: 5 to 13
*.MX_5.app[3].typename = "UdpBasicApp"
*.MX_5.app[3].display-name = "f16"
*.MX_5.app[3].destAddresses = "MX_13"
*.MX_5.app[3].destPort = 1016
*.MX_5.app[3].messageLength = 363B
*.MX_5.app[3].sendInterval = gamma_d(1.0058958753965048, 0.0009977698603290495) * 1s

# f17: 5 to 8
*.MX_5.app[4].typename = "UdpBasicApp"
*.MX_5.app[4].display-name = "f17"
*.MX_5.app[4].destAddresses = "MX_8"
*.MX_5.app[4].destPort = 1017
*.MX_5.app[4].messageLength = 363B
*.MX_5.app[4].sendInterval = gamma_d(0.9954140347503732, 0.0030665963193552033) * 1s

# client stream identification
*.MX_5.bridging.streamIdentifier.identifier.mapping = [
        {stream: "f12", packetFilter: expr(has(udp) && udp.destPort == 1012)},
        {stream: "f13", packetFilter: expr(has(udp) && udp.destPort == 1013)},
        {stream: "f14", packetFilter: expr(has(udp) && udp.destPort == 1014)},
        {stream: "f16", packetFilter: expr(has(udp) && udp.destPort == 1016)},
        {stream: "f17", packetFilter: expr(has(udp) && udp.destPort == 1017)}
    ]

# client stream encoding
*.MX_5.bridging.streamCoder.encoder.mapping = [
        {stream: "f12", pcp: 5, vlan: 22},
        {stream: "f13", pcp: 5, vlan: 23},
        {stream: "f14", pcp: 5, vlan: 24},
        {stream: "f16", pcp: 5, vlan: 26},
        {stream: "f17", pcp: 5, vlan: 27}
    ]

# =========== Receiving ===========

# f10: 5 from 2
*.MX_5.app[5].typename = "UdpSinkApp"
*.MX_5.app[5].io.localPort = 1010

# =============================
#         6
# =============================

*.MX_6.numApps = 5
*.MX_6.hasOutgoingStreams = true

# =========== Sending ===========

# f4: 6 to 10
*.MX_6.app[0].typename = "UdpBasicApp"
*.MX_6.app[0].display-name = "f4"
*.MX_6.app[0].destAddresses = "MX_10"
*.MX_6.app[0].destPort = 1004
*.MX_6.app[0].messageLength = 363B
*.MX_6.app[0].sendInterval = gamma_d(0.9954140347503732, 0.0030665963193552033) * 1s

# f7: 6 to 13
*.MX_6.app[1].typename = "UdpBasicApp"
*.MX_6.app[1].display-name = "f7"
*.MX_6.app[1].destAddresses = "MX_13"
*.MX_6.app[1].destPort = 1007
*.MX_6.app[1].messageLength = 363B
*.MX_6.app[1].sendInterval = gamma_d(1.0543895338987044, 9.034499569415728e-05) * 1s

# f11: 6 to 10
*.MX_6.app[2].typename = "UdpBasicApp"
*.MX_6.app[2].display-name = "f11"
*.MX_6.app[2].destAddresses = "MX_10"
*.MX_6.app[2].destPort = 1011
*.MX_6.app[2].messageLength = 363B
*.MX_6.app[2].sendInterval = gamma_d(0.9954140347503732, 0.0030665963193552033) * 1s

# f18: 6 to 13
*.MX_6.app[3].typename = "UdpBasicApp"
*.MX_6.app[3].display-name = "f18"
*.MX_6.app[3].destAddresses = "MX_13"
*.MX_6.app[3].destPort = 1018
*.MX_6.app[3].messageLength = 363B
*.MX_6.app[3].sendInterval = gamma_d(1.073407055633838, 9.696219719607213e-05) * 1s

# f21: 6 to 13
*.MX_6.app[4].typename = "UdpBasicApp"
*.MX_6.app[4].display-name = "f21"
*.MX_6.app[4].destAddresses = "MX_13"
*.MX_6.app[4].destPort = 1021
*.MX_6.app[4].messageLength = 363B
*.MX_6.app[4].sendInterval = gamma_d(1.0930823363815443, 6.314842725249129e-05) * 1s

# client stream identification
*.MX_6.bridging.streamIdentifier.identifier.mapping = [
        {stream: "f4", packetFilter: expr(has(udp) && udp.destPort == 1004)},
        {stream: "f7", packetFilter: expr(has(udp) && udp.destPort == 1007)},
        {stream: "f11", packetFilter: expr(has(udp) && udp.destPort == 1011)},
        {stream: "f18", packetFilter: expr(has(udp) && udp.destPort == 1018)},
        {stream: "f21", packetFilter: expr(has(udp) && udp.destPort == 1021)}
    ]

# client stream encoding
*.MX_6.bridging.streamCoder.encoder.mapping = [
        {stream: "f4", pcp: 5, vlan: 14},
        {stream: "f7", pcp: 5, vlan: 17},
        {stream: "f11", pcp: 5, vlan: 21},
        {stream: "f18", pcp: 5, vlan: 28},
        {stream: "f21", pcp: 5, vlan: 31}
    ]

# =========== Receiving ===========
# No flows

# =============================
#         7
# =============================

*.MX_7.numApps = 4
*.MX_7.hasOutgoingStreams = true

# =========== Sending ===========

# f0: 7 to 13
*.MX_7.app[0].typename = "UdpBasicApp"
*.MX_7.app[0].display-name = "f0"
*.MX_7.app[0].destAddresses = "MX_13"
*.MX_7.app[0].destPort = 1000
*.MX_7.app[0].messageLength = 363B
*.MX_7.app[0].sendInterval = gamma_d(1.0064895951640385, 0.00044789379082096675) * 1s

# f1: 7 to 10
*.MX_7.app[1].typename = "UdpBasicApp"
*.MX_7.app[1].display-name = "f1"
*.MX_7.app[1].destAddresses = "MX_10"
*.MX_7.app[1].destPort = 1001
*.MX_7.app[1].messageLength = 363B
*.MX_7.app[1].sendInterval = gamma_d(0.9954140347503732, 0.0030665963193552033) * 1s

# f20: 7 to 13
*.MX_7.app[2].typename = "UdpBasicApp"
*.MX_7.app[2].display-name = "f20"
*.MX_7.app[2].destAddresses = "MX_13"
*.MX_7.app[2].destPort = 1020
*.MX_7.app[2].messageLength = 363B
*.MX_7.app[2].sendInterval = gamma_d(1.0316831618860713, 0.00044384663481642747) * 1s

# client stream identification
*.MX_7.bridging.streamIdentifier.identifier.mapping = [
        {stream: "f0", packetFilter: expr(has(udp) && udp.destPort == 1000)},
        {stream: "f1", packetFilter: expr(has(udp) && udp.destPort == 1001)},
        {stream: "f20", packetFilter: expr(has(udp) && udp.destPort == 1020)}
    ]

# client stream encoding
*.MX_7.bridging.streamCoder.encoder.mapping = [
        {stream: "f0", pcp: 5, vlan: 10},
        {stream: "f1", pcp: 5, vlan: 11},
        {stream: "f20", pcp: 5, vlan: 30}
    ]

# =========== Receiving ===========

# f13: 7 from 5
*.MX_7.app[3].typename = "UdpSinkApp"
*.MX_7.app[3].io.localPort = 1013

# =============================
#         8
# =============================

*.MX_8.numApps = 4
*.MX_8.hasOutgoingStreams = true

# =========== Sending ===========

# f15: 8 to 13
*.MX_8.app[0].typename = "UdpBasicApp"
*.MX_8.app[0].display-name = "f15"
*.MX_8.app[0].destAddresses = "MX_13"
*.MX_8.app[0].destPort = 1015
*.MX_8.app[0].messageLength = 363B
*.MX_8.app[0].sendInterval = gamma_d(0.9974866897533453, 0.0003111699996485905) * 1s

# f25: 8 to 13
*.MX_8.app[1].typename = "UdpBasicApp"
*.MX_8.app[1].display-name = "f25"
*.MX_8.app[1].destAddresses = "MX_13"
*.MX_8.app[1].destPort = 1025
*.MX_8.app[1].messageLength = 363B
*.MX_8.app[1].sendInterval = gamma_d(1.0214856114207347, 0.000311545975725711) * 1s

# client stream identification
*.MX_8.bridging.streamIdentifier.identifier.mapping = [
        {stream: "f15", packetFilter: expr(has(udp) && udp.destPort == 1015)},
        {stream: "f25", packetFilter: expr(has(udp) && udp.destPort == 1025)}
    ]

# client stream encoding
*.MX_8.bridging.streamCoder.encoder.mapping = [
        {stream: "f15", pcp: 5, vlan: 25},
        {stream: "f25", pcp: 5, vlan: 35}
    ]

# =========== Receiving ===========

# f17: 8 from 5
*.MX_8.app[2].typename = "UdpSinkApp"
*.MX_8.app[2].io.localPort = 1017

# f23: 8 from 4
*.MX_8.app[3].typename = "UdpSinkApp"
*.MX_8.app[3].io.localPort = 1023

# =============================
#         9
# =============================

*.MX_9.numApps = 5
*.MX_9.hasOutgoingStreams = true

# =========== Sending ===========

# f2: 9 to 12
*.MX_9.app[0].typename = "UdpBasicApp"
*.MX_9.app[0].display-name = "f2"
*.MX_9.app[0].destAddresses = "MX_12"
*.MX_9.app[0].destPort = 1002
*.MX_9.app[0].messageLength = 363B
*.MX_9.app[0].sendInterval = gamma_d(1.127850351108445, 1.9683930388612626e-05) * 1s

# f6: 9 to 12
*.MX_9.app[1].typename = "UdpBasicApp"
*.MX_9.app[1].display-name = "f6"
*.MX_9.app[1].destAddresses = "MX_12"
*.MX_9.app[1].destPort = 1006
*.MX_9.app[1].messageLength = 363B
*.MX_9.app[1].sendInterval = gamma_d(1.1599157756805474, 1.03715719296442e-05) * 1s

# f9: 9 to 12
*.MX_9.app[2].typename = "UdpBasicApp"
*.MX_9.app[2].display-name = "f9"
*.MX_9.app[2].destAddresses = "MX_12"
*.MX_9.app[2].destPort = 1009
*.MX_9.app[2].messageLength = 363B
*.MX_9.app[2].sendInterval = gamma_d(1.1490573169789808, 1.6324884166243423e-05) * 1s

# client stream identification
*.MX_9.bridging.streamIdentifier.identifier.mapping = [
        {stream: "f2", packetFilter: expr(has(udp) && udp.destPort == 1002)},
        {stream: "f6", packetFilter: expr(has(udp) && udp.destPort == 1006)},
        {stream: "f9", packetFilter: expr(has(udp) && udp.destPort == 1009)}
    ]

# client stream encoding
*.MX_9.bridging.streamCoder.encoder.mapping = [
        {stream: "f2", pcp: 5, vlan: 12},
        {stream: "f6", pcp: 5, vlan: 16},
        {stream: "f9", pcp: 5, vlan: 19}
    ]

# =========== Receiving ===========

# f3: 9 from 1
*.MX_9.app[3].typename = "UdpSinkApp"
*.MX_9.app[3].io.localPort = 1003

# f22: 9 from 3
*.MX_9.app[4].typename = "UdpSinkApp"
*.MX_9.app[4].io.localPort = 1022

# =============================
#         10
# =============================

*.MX_10.numApps = 4
*.MX_10.hasOutgoingStreams = false

# =========== Sending ===========

# No flows

# =========== Receiving ===========

# f1: 10 from 7
*.MX_10.app[0].typename = "UdpSinkApp"
*.MX_10.app[0].io.localPort = 1001

# f4: 10 from 6
*.MX_10.app[1].typename = "UdpSinkApp"
*.MX_10.app[1].io.localPort = 1004

# f11: 10 from 6
*.MX_10.app[2].typename = "UdpSinkApp"
*.MX_10.app[2].io.localPort = 1011

# f24: 10 from 4
*.MX_10.app[3].typename = "UdpSinkApp"
*.MX_10.app[3].io.localPort = 1024

# =============================
#         11
# =============================

*.MX_11.numApps = 1
*.MX_11.hasOutgoingStreams = false

# =========== Sending ===========

# No flows

# =========== Receiving ===========

# f14: 11 from 5
*.MX_11.app[0].typename = "UdpSinkApp"
*.MX_11.app[0].io.localPort = 1014

# =============================
#         12
# =============================

*.MX_12.numApps = 4
*.MX_12.hasOutgoingStreams = false

# =========== Sending ===========

# No flows

# =========== Receiving ===========

# f2: 12 from 9
*.MX_12.app[0].typename = "UdpSinkApp"
*.MX_12.app[0].io.localPort = 1002

# f5: 12 from 2
*.MX_12.app[1].typename = "UdpSinkApp"
*.MX_12.app[1].io.localPort = 1005

# f6: 12 from 9
*.MX_12.app[2].typename = "UdpSinkApp"
*.MX_12.app[2].io.localPort = 1006

# f9: 12 from 9
*.MX_12.app[3].typename = "UdpSinkApp"
*.MX_12.app[3].io.localPort = 1009

# =============================
#         13
# =============================

*.MX_13.numApps = 10
*.MX_13.hasOutgoingStreams = false

# =========== Sending ===========

# No flows

# =========== Receiving ===========

# f0: 13 from 7
*.MX_13.app[0].typename = "UdpSinkApp"
*.MX_13.app[0].io.localPort = 1000

# f7: 13 from 6
*.MX_13.app[1].typename = "UdpSinkApp"
*.MX_13.app[1].io.localPort = 1007

# f8: 13 from 2
*.MX_13.app[2].typename = "UdpSinkApp"
*.MX_13.app[2].io.localPort = 1008

# f12: 13 from 5
*.MX_13.app[3].typename = "UdpSinkApp"
*.MX_13.app[3].io.localPort = 1012

# f15: 13 from 8
*.MX_13.app[4].typename = "UdpSinkApp"
*.MX_13.app[4].io.localPort = 1015

# f16: 13 from 5
*.MX_13.app[5].typename = "UdpSinkApp"
*.MX_13.app[5].io.localPort = 1016

# f18: 13 from 6
*.MX_13.app[6].typename = "UdpSinkApp"
*.MX_13.app[6].io.localPort = 1018

# f20: 13 from 7
*.MX_13.app[7].typename = "UdpSinkApp"
*.MX_13.app[7].io.localPort = 1020

# f21: 13 from 6
*.MX_13.app[8].typename = "UdpSinkApp"
*.MX_13.app[8].io.localPort = 1021

# f25: 13 from 8
*.MX_13.app[9].typename = "UdpSinkApp"
*.MX_13.app[9].io.localPort = 1025

